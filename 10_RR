#include <stdio.h>

struct Process {
    int pid, arrival, burst, remaining, start_time, completion, turnaround, waiting, response;
};

// Function to calculate waiting, turnaround, and response times
void calculateTimes(struct Process proc[], int n) {
    int total_wt = 0, total_tat = 0, total_res = 0;
    for (int i = 0; i < n; i++) {
        proc[i].turnaround = proc[i].completion - proc[i].arrival;
        proc[i].waiting = proc[i].turnaround - proc[i].burst;
        proc[i].response = proc[i].start_time - proc[i].arrival;
        
        total_wt += proc[i].waiting;
        total_tat += proc[i].turnaround;
        total_res += proc[i].response;
    }
    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n);
    printf("\nAverage Response Time: %.2f\n", (float)total_res / n);
}

// Function to implement Round Robin scheduling
void roundRobin(struct Process proc[], int n, int quantum) {
    int time = 0, completed = 0;
    int queue[n];  // To store process indices
    int front = 0, rear = 0;

    // Initialize the queue with processes that have arrived at time 0
    for (int i = 0; i < n; i++) {
        proc[i].remaining = proc[i].burst;
        if (proc[i].arrival <= time) {
            queue[rear++] = i;
        }
    }

    while (completed < n) {
        if (front == rear) {
            // If the queue is empty, move time forward to the next process arrival
            int min_arrival_time = __INT_MAX__;
            for (int i = 0; i < n; i++) {
                if (proc[i].arrival > time && proc[i].arrival < min_arrival_time) {
                    min_arrival_time = proc[i].arrival;
                }
            }
            time = min_arrival_time;
            // Add newly arrived processes to the queue
            for (int i = 0; i < n; i++) {
                if (proc[i].arrival <= time && proc[i].remaining > 0) {
                    queue[rear++] = i;
                }
            }
            continue;
        }

        int idx = queue[front++];
        // Start time for the process
        if (proc[idx].remaining == proc[idx].burst) {
            proc[idx].start_time = time;
        }

        // Execute the process for quantum or remaining burst time
        int exec_time = (proc[idx].remaining > quantum) ? quantum : proc[idx].remaining;
        proc[idx].remaining -= exec_time;
        time += exec_time;

        // If process finishes, update completion time and increment completed count
        if (proc[idx].remaining == 0) {
            proc[idx].completion = time;
            completed++;
        }

        // If process is not finished, add it back to the queue
        if (proc[idx].remaining > 0) {
            queue[rear++] = idx;
        }
    }

    calculateTimes(proc, n);
}

// Function to input process details
void inputProcesses(struct Process proc[], int n) {
    for (int i = 0; i < n; i++) {
        printf("Enter Process %d Arrival Time and Burst Time: ", i + 1);
        scanf("%d %d", &proc[i].arrival, &proc[i].burst);
        proc[i].pid = i + 1;  // Assign Process ID
    }
}

// Function to display process details
void displayProcesses(struct Process proc[], int n) {
    printf("\nPID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\tResponse\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\t%d\n", proc[i].pid, proc[i].arrival, proc[i].burst, proc[i].completion, proc[i].turnaround, proc[i].waiting, proc[i].response);
    }
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &quantum);

    struct Process proc[n];

    inputProcesses(proc, n);
    roundRobin(proc, n, quantum);
    displayProcesses(proc, n);

    return 0;
}
